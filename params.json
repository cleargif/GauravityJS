{"tagline":"Library that make JavaScript inheritance easy.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Gauravityjs","body":"Gauravity JS\r\n===========\r\n\r\nA library to make javascript inheritence simple.\r\n\r\nInstant Gratification\r\n---------------------\r\n    Gauravity.define('CA.ui.Button',{\r\n      initilize: function(){\r\n         console.log(\"-> CA.ui.Button initilize\"); \r\n      },\r\n        properties: {\r\n     \t\ttext: \"Label\",\r\n     \t\twidth: 300,\r\n     \t\theight: 22,\r\n     \t\tborder: 2,\r\n     \t\tbackgroundColor: '0x000000',\r\n     \t\tforegroundColor: '0xFFFFFF'\r\n   \t  },\r\n     \tsayHello: function() {\r\n     \t\treturn 'Button::sayHello() ' + this.text;\r\n     \t}\r\n    });\r\n\r\n    Gauravity.define('CA.ui.BackButton', {\r\n      extend: 'CA.ui.Button',\r\n\r\n      initilize: function(){\r\n         console.log(\"-> CA.ui.BackButton initilize\"); \r\n      },\r\n      properties: {\r\n        text: 'Back',\r\n        backgroundColor: 'grey',\r\n      },\r\n      goodBye: function () {\r\n        return 'Button::goodBye()';\r\n      }\r\n    });\r\n\r\nAPI\r\n------------------------------\r\n\r\n### Gauravity.define([String namespace],[Object config]); ###\r\n\r\nDefine function is used to create an object with properties and functions is one \r\nsingle step. \r\n\r\n    Gauravity.define('CA.ui.Button',{\r\n      initilize: function(){\r\n         console.log(\"-> CA.ui.Button initilize\"); \r\n      },\r\n        properties: {\r\n         \ttext: \"Label\",\r\n     \t\twidth: 300,\r\n     \t\theight: 22,\r\n     \t\tborder: 2,\r\n     \t\tbackgroundColor: '0x000000',\r\n     \t\tforegroundColor: '0xFFFFFF'\r\n   \t  },\r\n     \tsayHello: function() {\r\n     \t\treturn 'Button::sayHello() ' + this.text;\r\n     \t}\r\n    });\r\n\r\nIn the above example we create an object called Button in a namespace that was \r\ncreated automatically for us. Then we defined an initilize function that gets\r\nexcecuted automaticacly then this object is created. \r\n\r\nWe are also passing some properties related to this object and public function as \r\nsayHello();. All these properties and functions are added to the object and we \r\ncan access the object these functions as CA.ui.Button.sayHello();\r\n\r\nYou can also implement inheritence by adding the extend keyword and Object name.\r\n\r\n    Gauravity.define('CA.ui.BackButton', {\r\n      extend: 'CA.ui.Button',\r\n\r\n      initilize: function(){\r\n         console.log(\"-> CA.ui.BackButton initilize\"); \r\n      },\r\n      properties: {\r\n        text: 'Back',\r\n        backgroundColor: 'grey',\r\n      },\r\n      goodBye: function () {\r\n        return 'Button::goodBye()';\r\n      }\r\n    });\r\n\r\nIn the above example CA.ui.BackButton is inheriting all properties from \r\nCA.ui.Button and added its own properies as well. You can now access sayHello() \r\nfunction in BackButton now. \r\n\r\n    CA.ui.BackButton.sayHello();\r\n    \r\n\r\n### Gauravity.namespaces([String namespace],[Object option]); ###\r\n\r\nThe function will create an object namespace for you in one single step. You can \r\nalso pass optional parameter for options if you want to create just a top level\r\nobject hierarchy.\r\n\r\n    Gauravity.namespaces('CA.ui.Button');\r\n\r\nThis is create a namespace as CA -> ui -> Button\r\n\r\n    Gauravity.namespaces('CA.ui.Navigation', {level: \"TOP\"});\r\n    \r\nThis is create a namespace as CA -> ui\r\n\r\n\r\nMore documentation coming soon.\r\n------------------------------"}